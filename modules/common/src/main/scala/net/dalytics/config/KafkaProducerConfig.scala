package net.dalytics.config

import scala.concurrent.duration.FiniteDuration

import cats.effect.Sync
import derevo.derive
import derevo.pureconfig.pureconfigReader
import pureconfig.ConfigSource
import pureconfig.module.catseffect.syntax._

@derive(pureconfigReader)
final case class KafkaProducerConfig(
  topic: Map[String, String],       // The topic to which the record should be produced.
  compressionType: String = "none", // The compression type for all data generated by the producer.
  batchSize: Int,                   // This configuration controls the default batch size in bytes.
  linger: FiniteDuration,           // This setting gives the upper bound on the delay for batching.
  parallelism: Int                  // FS2 Kafka. The max number of [[ProducerRecords]] to produce in the same batch when using the produce pipe.
)

object KafkaProducerConfig {
  lazy val load: KafkaProducerConfig = ConfigSource.default.at("kafka-producer").loadOrThrow[KafkaProducerConfig]

  def loadF[F[_]: Sync: ContextShift]: F[KafkaProducerConfig] =
    ConfigSource.default.at("kafka-producer").loadF[F, KafkaProducerConfig](blocker)
}
